openapi: 3.0.1
info:
  description: Api Documentation
  version: '1.0'
  title: Api Documentation
  termsOfService: 'urn:tos'
  contact: {}
security:
- bearerAuth: []
paths:
  /exercises:
    get:
      summary: Gets the full list of exercises
      operationId: exercisesIndex
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Exercise'
    post:
      summary: Creates a new exercise
      operationId: exercisesAdd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Exercise'
      responses:
        '201':
          description: Exercise has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '400':
          description: Bad Request
        '401':
          description: User must be logged in to submit solutions to the exercise
        '403':
          description: User is not allowed to create a new exercise
  '/exercises/{exerciseId}':
    get:
      summary: Gets the specified exercise
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '401':
          description: User must be logged in to see this exercise
        '403':
          description: User is not allowed to see this exercise
        '404':
          description: Exercise does not exist
  '/exercises/{exerciseId}/submissions':
    get:
      summary: Gets the list of submissions for the specified exercise
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExerciseSubmission'
        '401':
          description: User must be logged in to see the submissions.
        '403':
          description: User is not allowed to see the submissions.
        '404':
          description: Exercise does not exist
    post:
      summary: Submits the code as the current user's solution for the exercise
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExerciseSubmission'
      responses:
        '201':
          description: Submission has been created
        '400':
          description: Submitted solution does not fit the exercise parameters
        '401':
          description: User must be logged in to submit solutions to the exercise
        '403':
          description: User is not allowed to post solutions for this exercise
        '404':
          description: Exercise does not exist
  '/exercises/{exerciseId}/test':
    post:
      summary: Validate the code against the user-provided test suite
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunnerArguments'
      responses:
        '200':
          description: The test suite has been executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeValidationReport'
        '400':
          description: Submitted solution does not fit the exercise parameters
        '401':
          description: User must be logged in to see this exercise
        '403':
          description: User is not allowed to see this exercise
        '404':
          description: Exercise does not exist
  '/exercises/{exerciseId}/submissions/{submissionId}':
    get:
      summary: Gets the list of submissions for the specified exercise
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      - name: submissionId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExerciseSubmission'
        '401':
          description: User must be logged in to see this submission
        '403':
          description: User is not allowed to see this submission
        '404':
          description: Submission does not exist
  '/exercises/{exerciseId}/submissions/{submissionId}/results':
    get:
      summary: Gets the results of the exercise validation for this submission
      parameters:
      - name: exerciseId
        in: path
        required: true
        schema:
          type: integer
      - name: submissionId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CodeValidationReport'
        '401':
          description: User must be logged in to see the results
        '403':
          description: User is not allowed to see the results
        '404':
          description: Submission does not exist
  /groups:
    get:
      summary: Gets the full list of groups
      operationId: groupsBrowse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      summary: Creates a new group
      operationId: groupsAdd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Group has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad Request
        '401':
          description: User must be logged in to create new group
        '403':
          description: User is not allowed to create a new group
    put:
      summary: Edits an existing group
      operationId: groupsEdit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Group has been modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Bad Request
        '401':
          description: User must be logged in to edit group
        '403':
          description: User is not allowed to edit this group
  /users:
    get:
      summary: Gets the full list of users
      operationId: usersBrowse
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Creates a new user
      operationId: usersAdd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
        '401':
          description: User must be logged in to create new user
        '403':
          description: User is not allowed to create a new user
  '/users/{userId}':
    get:
      summary: Gets the specified user
      operationId: usersRead
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: User must be logged in to see this user
        '403':
          description: User is not allowed to see this user
        '404':
          description: User does not exist
  '/users/{userId}/reports':
    get:
      summary: Gets the specified user's reports
      operationId: userReportsRead
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CodeValidationReport'
        '401':
          description: User must be logged in to see this user
        '403':
          description: User is not allowed to see this user
        '404':
          description: User does not exist
  '/google-login':
    get:
      summary: Redirects to the google login page according to the Authorization Code grant type flow.
      responses:
        '302':
          description: Redirect to the google auth uri.
          headers:
            Location:
              schema:
                type: string
              description: Standard redirect URI.
servers:
- url: '//localhost:8080/'
components:
  schemas:
    RunnerArguments:
      type: object
      properties:
        code:
          description: code
          type: string
          maxLength: 5000
        language:
          description: language
          type: string
          maxLength: 255
        fixture:
          description: fixture
          type: string
          maxLength: 5000
      example:
        language: js
        code: 'function dateNbDays(a0, a, p) {
              	// your code
                return "2016-11-22";
                }'
        fixture: 'function testing(actual, expected) {
                 	Test.assertEquals(actual, expected)
                 }

                 Test.describe("dateNbDays",function() {
                   Test.it("Basic tests",function() {
                   testing(dateNbDays(4281, 5087, 2), "2024-07-03");
                   testing(dateNbDays(4620, 5188, 2), "2021-09-19");
                   testing(dateNbDays(9999, 11427, 6), "2018-03-13");
                   testing(dateNbDays(3525, 4822, 3), "2026-04-18");
                   testing(dateNbDays(5923, 6465, 6), "2017-06-10");
                   testing(dateNbDays(4254, 4761, 8), "2017-05-22");
                   testing(dateNbDays(1244, 2566, 4), "2033-11-04");
                   testing(dateNbDays(6328, 7517, 5), "2019-05-25");
                   testing(dateNbDays(2920, 3834, 2), "2029-06-03");
                   testing(dateNbDays(7792, 8987, 4), "2019-07-09");
                   })})'
    CodeValidationReport:
      type: object
      properties:
        exerciseId:
          type: integer
        exitCode:
          type: integer
        message:
          type: string
          maxLength: 500
        result:
          type: object
          properties:
            assertions:
              type: object
              properties:
                passed:
                  type: integer
                failed:
                  type: integer
            completed:
              type: boolean
            output:
              type: array
              items:
                $ref: '#/components/schemas/TestCaseResult'
          required:
          - assertions
          - completed
          - output
        # We account for large stack traces
        stderr:
          type: string
          maxLength: 5000
        stdout:
          type: string
          maxLength: 5000
        timedOut:
          type: boolean
        token:
          type: string
          maxLength: 5000
        executionTime:
          type: integer
      required:
      - exerciseId
      - exitCode
      - message
      - result
      - stderr
      - stdout
      - timedOut
      - token
      - executionTime
    TestCaseResult:
      type: object
      properties:
        passed:
          type: boolean
        text:
          type: string
          maxLength: 500
        items:
          type: array
          items:
            $ref: '#/components/schemas/AssertionResult'
      required:
      - text
      - passed
      - items
    AssertionResult:
      type: object
      properties:
        passed:
          type: boolean
        text:
          type: string
          maxLength: 500
        items:
          type: array
          items:
            type: object
            properties:
              passed:
                type: boolean
              message:
                type: string
                maxLength: 500
      required:
      - text
      - passed
      - items
    RFC7807Body:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        detail:
          type: string
        status:
          type: integer
          format: int64
        instance:
          type: string
          format: uri
      xml:
        name: problem
    IntlString:
      type: object
      properties:
        fr:
          type: string
          maxLength: 5000
        en:
          type: string
          maxLength: 5000
      required:
      - fr
    Exercise:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          $ref: '#/components/schemas/IntlString'
        description:
          $ref: '#/components/schemas/IntlString'
        difficulty:
          $ref: '#/components/schemas/Difficulties'
        template:
          $ref: '#/components/schemas/Template'
        fixtures:
          type: object
          properties:
            cpp:
              type: string
              maxLength: 5000
            python:
              type: string
              maxLength: 5000
            java:
              type: string
              maxLength: 5000
            javascript:
              type: string
              maxLength: 5000
        sampleTestCases:
          type: array
          items:
            $ref: '#/components/schemas/TestCase'
      required:
      - id
      - title
      - description
      - difficulty
      - template
      - fixtures
      - sampleTestCases
    ExerciseSubmission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        exerciseId:
          type: integer
        userId:
          type: integer
        code:
          type: string
          maxLength: 5000
        language:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
      - id
      - exerciseId
      - userId
      - code
      - language
    Template:
      type: object
      properties:
        functionName:
          type: string
          maxLength: 50
        params:
          type: array
          items:
            $ref: '#/components/schemas/Parameter'
        functionReturnType:
          $ref: '#/components/schemas/SupportedType'
        prependedCode:
          type: object
          additionalProperties:
            type: string
            maxLength: 1000
        appendedCode:
          type: object
          additionalProperties:
            type: string
            maxLength: 1000
      required:
      - functionName
      - params
      - functionReturnType
      - prependedCode
      - appendedCode
    SupportedType:
      type: string
      enum:
      - BOOLEAN
      - INT
      - FLOAT
      - STRING
      - CHAR
      - BOOLEAN_ARRAY
      - INT_ARRAY
      - FLOAT_ARRAY
      - STRING_ARRAY
      - CHAR_ARRAY
    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
          maxLength: 100
        lastName:
          type: string
          maxLength: 100
        email:
          type: string
          maxLength: 254
          format: email
      required:
      - id
      - firstName
      - lastName
      - email
      - password
    SupportedLanguages:
      description: Languages supported by the api
      type: string
      enum:
      - cpp
      - java
      - javascript
      - python
    Difficulties:
      description: Exercise difficulty range
      type: string
      enum:
      - EASY
      - MEDIUM
      - HARD
    Semesters:
      description: Semester values.
      type: string
      enum:
      - FALL
      - WINTER
      - SUMMER
    AnyValue:
      description: Type encompassing any value type
      nullable: true
    TestCase:
      description: Test case data structure used to generate examplary test cases
      type: object
      properties:
        it:
          type: string
          maxLength: 50
        assertions:
          type: array
          items:
            $ref: '#/components/schemas/Assertion'
      required:
      - it
      - assertions
    Assertion:
      description: An assertion to be included in a test
      type: object
      properties:
        inputArguments:
          type: array
          items:
            $ref: '#/components/schemas/Argument'
        expectedOutput:
          $ref: '#/components/schemas/Argument'
      required:
      - inputArguments
      - expectedOutput
    Argument:
      description: An argument
      type: object
      properties:
        type:
          $ref: '#/components/schemas/SupportedType'
        value:
          $ref: '#/components/schemas/AnyValue'
      required:
      - type
      - value
    Parameter:
      description: A parameter
      type: object
      properties:
        name:
          type: string
          maxLength: 50
        type:
          $ref: '#/components/schemas/SupportedType'
      required:
      - type
      - name
    Group:
      description: Group of students
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        groupNumber:
          type: integer
        course:
          type: string
          maxLength: 50
        semester:
          $ref: '#/components/schemas/Semesters'
        year:
          type: number
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
        archived:
          type: boolean
      required:
      - id
      - groupNumber
      - course
      - semester
      - year
      - students
      - archived
    Student:
      description: A student user
      type: object
      properties:
        accessCode:
          type: integer
        firstName:
          type: string
          maxLength: 100
        lastName:
          type: string
          maxLength: 100
        email:
          type: string
          maxLength: 254
        totalExercisesSuccessed:
          type: number
        totalExercisesDone:
          type: number
      required:
      - accessCode
      - firstName
      - lastName
      - type
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    RFC7807Error:
      description: Api problem response
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/RFC7807Body'
        application/problem+xml:
          schema:
            $ref: '#/components/schemas/RFC7807Body'
