/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.etsmtl.codecrusade.controllers;

import com.etsmtl.codecrusade.model.CodeValidationReport;
import com.etsmtl.codecrusade.model.Exercise;
import com.etsmtl.codecrusade.model.ExerciseSubmission;
import com.etsmtl.codecrusade.model.RunnerArguments;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2018-11-12T18:01:20.447505100-05:00[America/New_York]")

@Validated
@Api(value = "exercises", description = "the exercises API")
public interface ExercisesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Creates a new exercise", nickname = "exercisesAdd", notes = "", response = Exercise.class, authorizations = {
        @Authorization(value = "authCookie")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Exercise has been created", response = Exercise.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "User must be logged in to submit solutions to the exercise"),
        @ApiResponse(code = 403, message = "User is not allowed to create a new exercise") })
    @RequestMapping(value = "/exercises",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Exercise> exercisesAdd(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Exercise exercise) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"template\" : {    \"functionReturnValue\" : \"\",    \"functionName\" : \"functionName\",    \"className\" : \"className\",    \"params\" : [ {      \"name\" : \"name\"    }, {      \"name\" : \"name\"    } ],    \"appendedCode\" : {      \"key\" : \"appendedCode\"    },    \"prependedCode\" : {      \"key\" : \"prependedCode\"    }  },  \"supportedLanguages\" : [ \"supportedLanguages\", \"supportedLanguages\" ],  \"description\" : {    \"en\" : \"en\",    \"fr\" : \"fr\"  },  \"id\" : 0,  \"title\" : {    \"en\" : \"en\",    \"fr\" : \"fr\"  },  \"sampleTestCases\" : [ {    \"it\" : \"it\",    \"assertions\" : [ {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    }, {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    } ]  }, {    \"it\" : \"it\",    \"assertions\" : [ {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    }, {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    } ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Gets the specified exercise", nickname = "exercisesExerciseIdGet", notes = "", response = Exercise.class, authorizations = {
        @Authorization(value = "authCookie")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Exercise.class),
        @ApiResponse(code = 401, message = "User must be logged in to see this exercise"),
        @ApiResponse(code = 403, message = "User is not allowed to see this exercise"),
        @ApiResponse(code = 404, message = "Exercise does not exist") })
    @RequestMapping(value = "/exercises/{exerciseId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Exercise> exercisesExerciseIdGet(@ApiParam(value = "",required=true) @PathVariable("exerciseId") Integer exerciseId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"template\" : {    \"functionReturnValue\" : \"\",    \"functionName\" : \"functionName\",    \"className\" : \"className\",    \"params\" : [ {      \"name\" : \"name\"    }, {      \"name\" : \"name\"    } ],    \"appendedCode\" : {      \"key\" : \"appendedCode\"    },    \"prependedCode\" : {      \"key\" : \"prependedCode\"    }  },  \"supportedLanguages\" : [ \"supportedLanguages\", \"supportedLanguages\" ],  \"description\" : {    \"en\" : \"en\",    \"fr\" : \"fr\"  },  \"id\" : 0,  \"title\" : {    \"en\" : \"en\",    \"fr\" : \"fr\"  },  \"sampleTestCases\" : [ {    \"it\" : \"it\",    \"assertions\" : [ {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    }, {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    } ]  }, {    \"it\" : \"it\",    \"assertions\" : [ {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    }, {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    } ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Gets the list of submissions for the specified exercise", nickname = "exercisesExerciseIdSubmissionsGet", notes = "", response = ExerciseSubmission.class, responseContainer = "List", authorizations = {
        @Authorization(value = "authCookie")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ExerciseSubmission.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "User must be logged in to see the submissions."),
        @ApiResponse(code = 403, message = "User is not allowed to see the submissions."),
        @ApiResponse(code = 404, message = "Exercise does not exist") })
    @RequestMapping(value = "/exercises/{exerciseId}/submissions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ExerciseSubmission>> exercisesExerciseIdSubmissionsGet(@ApiParam(value = "",required=true) @PathVariable("exerciseId") Integer exerciseId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"code\" : \"code\",  \"exerciseId\" : 6,  \"language\" : \"{}\",  \"id\" : 0,  \"userId\" : 1}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Submits the code as the current user's solution for the exercise", nickname = "exercisesExerciseIdSubmissionsPost", notes = "", authorizations = {
        @Authorization(value = "authCookie")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Submission has been created"),
        @ApiResponse(code = 400, message = "Submitted solution does not fit the exercise parameters"),
        @ApiResponse(code = 401, message = "User must be logged in to submit solutions to the exercise"),
        @ApiResponse(code = 403, message = "User is not allowed to post solutions for this exercise"),
        @ApiResponse(code = 404, message = "Exercise does not exist") })
    @RequestMapping(value = "/exercises/{exerciseId}/submissions",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> exercisesExerciseIdSubmissionsPost(@ApiParam(value = "",required=true) @PathVariable("exerciseId") Integer exerciseId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody ExerciseSubmission exerciseSubmission) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Gets the list of submissions for the specified exercise", nickname = "exercisesExerciseIdSubmissionsSubmissionIdGet", notes = "", response = ExerciseSubmission.class, authorizations = {
        @Authorization(value = "authCookie")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ExerciseSubmission.class),
        @ApiResponse(code = 401, message = "User must be logged in to see this submission"),
        @ApiResponse(code = 403, message = "User is not allowed to see this submission"),
        @ApiResponse(code = 404, message = "Submission does not exist") })
    @RequestMapping(value = "/exercises/{exerciseId}/submissions/{submissionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ExerciseSubmission> exercisesExerciseIdSubmissionsSubmissionIdGet(@ApiParam(value = "",required=true) @PathVariable("exerciseId") Integer exerciseId,@ApiParam(value = "",required=true) @PathVariable("submissionId") Integer submissionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"code\" : \"code\",  \"exerciseId\" : 6,  \"language\" : \"{}\",  \"id\" : 0,  \"userId\" : 1}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Gets the results of the exercise validation for this submission", nickname = "exercisesExerciseIdSubmissionsSubmissionIdResultsGet", notes = "", response = CodeValidationReport.class, authorizations = {
        @Authorization(value = "authCookie")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CodeValidationReport.class),
        @ApiResponse(code = 401, message = "User must be logged in to see the results"),
        @ApiResponse(code = 403, message = "User is not allowed to see the results"),
        @ApiResponse(code = 404, message = "Submission does not exist") })
    @RequestMapping(value = "/exercises/{exerciseId}/submissions/{submissionId}/results",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<CodeValidationReport> exercisesExerciseIdSubmissionsSubmissionIdResultsGet(@ApiParam(value = "",required=true) @PathVariable("exerciseId") Integer exerciseId,@ApiParam(value = "",required=true) @PathVariable("submissionId") Integer submissionId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"exerciseId\" : 0,  \"results\" : [ {    \"actualOutput\" : \"\",    \"expectedOutput\" : \"\",    \"passed\" : true,    \"inputParameters\" : [ \"\", \"\" ],    \"testName\" : \"testName\"  }, {    \"actualOutput\" : \"\",    \"expectedOutput\" : \"\",    \"passed\" : true,    \"inputParameters\" : [ \"\", \"\" ],    \"testName\" : \"testName\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Validate the code against the exercise's test suite", nickname = "exercisesExerciseIdTestPost", notes = "", response = CodeValidationReport.class, authorizations = {
        @Authorization(value = "authCookie")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The test suite has been executed", response = CodeValidationReport.class),
        @ApiResponse(code = 400, message = "Submitted solution does not fit the exercise parameters"),
        @ApiResponse(code = 401, message = "User must be logged in to see this exercise"),
        @ApiResponse(code = 403, message = "User is not allowed to see this exercise"),
        @ApiResponse(code = 404, message = "Exercise does not exist") })
    @RequestMapping(value = "/exercises/{exerciseId}/test",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<CodeValidationReport> exercisesExerciseIdTestPost(@ApiParam(value = "",required=true) @PathVariable("exerciseId") Integer exerciseId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody RunnerArguments runnerArguments) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"exerciseId\" : 0,  \"results\" : [ {    \"actualOutput\" : \"\",    \"expectedOutput\" : \"\",    \"passed\" : true,    \"inputParameters\" : [ \"\", \"\" ],    \"testName\" : \"testName\"  }, {    \"actualOutput\" : \"\",    \"expectedOutput\" : \"\",    \"passed\" : true,    \"inputParameters\" : [ \"\", \"\" ],    \"testName\" : \"testName\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Gets the full list of exercises", nickname = "exercisesIndex", notes = "", response = Exercise.class, responseContainer = "List", authorizations = {
        @Authorization(value = "authCookie")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Exercise.class, responseContainer = "List") })
    @RequestMapping(value = "/exercises",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Exercise>> exercisesIndex() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"template\" : {    \"functionReturnValue\" : \"\",    \"functionName\" : \"functionName\",    \"className\" : \"className\",    \"params\" : [ {      \"name\" : \"name\"    }, {      \"name\" : \"name\"    } ],    \"appendedCode\" : {      \"key\" : \"appendedCode\"    },    \"prependedCode\" : {      \"key\" : \"prependedCode\"    }  },  \"supportedLanguages\" : [ \"supportedLanguages\", \"supportedLanguages\" ],  \"description\" : {    \"en\" : \"en\",    \"fr\" : \"fr\"  },  \"id\" : 0,  \"title\" : {    \"en\" : \"en\",    \"fr\" : \"fr\"  },  \"sampleTestCases\" : [ {    \"it\" : \"it\",    \"assertions\" : [ {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    }, {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    } ]  }, {    \"it\" : \"it\",    \"assertions\" : [ {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    }, {      \"inputArguments\" : [ {        \"value\" : \"\"      }, {        \"value\" : \"\"      } ],      \"expectedOutput\" : {        \"value\" : \"\"      }    } ]  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
